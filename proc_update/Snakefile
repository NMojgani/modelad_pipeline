import pandas as pd
import os
import sys
import swan_vis as swan
import itertools
import cerberus

from utils import *
from sm_utils import *

include: 'download.smk'
include: 'samtools.smk'
include: 'refs.smk'
include: 'talon.smk'
include: 'lapa.smk'
include: 'mapping.smk'
include: 'tc.smk'

# settings we can change each time it's run
configfile: 'config.yml'
config_tsv = '231018_config.tsv'
meta_tsv = 'mouse_metadata.tsv'
auto_dedupe = True

df = parse_config_file(config_tsv,
                       meta_tsv,
                       auto_dedupe=auto_dedupe)

wildcard_constraints:
    genotype='|'.join([re.escape(x) for x in df.genotype.unique().tolist()]),
    sex='|'.join([re.escape(x) for x in df.sex.unique().tolist()]),
    age='|'.join([re.escape(x) for x in df.age.unique().tolist()]),
    tissue='|'.join([re.escape(x) for x in df.tissue.unique().tolist()]),
    biorep_num='|'.join([re.escape(x) for x in df.biorep_num.unique().tolist()]),
    flowcell='|'.join([re.escape(x) for x in df.flowcell.unique().tolist()]),


rule all:
    input:
        expand(config['talon']['sam'],
               genotype='5xFADHEMI',
               sex='F',
               age='4_months',
               tissue='HC',
               biorep_num='1',
               flowcell='1')

################################################################################
#################################### Mapping ###################################
################################################################################
use rule map as map_reads with:
    input:
        fastq = lambda wc: get_df_col(wc, df, 'fname'),
        ref_fa = config['ref']['fa'],
        sjs = config['ref']['sjs']
    output:
        sam = temporary(config['map']['sam']),
        log = config['map']['log']

use rule alignment_stats as map_stats with:
    input:
        alignment = config['map']['sam']
    output:
        stats = config['map']['stats']

use rule rev_alignment as map_rev with:
    input:
        sam = config['map']['sam']
    output:
        sam_rev = temporary(config['map']['sam_rev'])

################################################################################
###################### TranscriptClean ##########################################
################################################################################
use rule tc as tc_sam with:
    input:
        sam = config['map']['sam_rev'],
        fa = config['ref']['fa']
    params:
        tc = config['tc'],
        opref = config['tc']['sam'].rsplit('_clean.sam', maxsplit=1)[0]
    output:
        sam = temporary(config['tc']['sam']),
        fa = temporary(config['tc']['fa']),
        sam_clean_log = temporary(config['tc']['log']),
        sam_clean_te_log = temporary(config['tc']['te_log'])

use rule alignment_stats as tc_stats with:
    input:
        alignment = config['tc']['sam']
    output:
        stats = config['tc']['stats']

################################################################################
############################## TALON label #####################################
################################################################################
use rule talon_label as talon_label_reads with:
    input:
        fa = config['ref']['fa'],
        sam = config['tc']['sam']
    params:
        frac_a_range = config['talon']['frac_a_range'],
        opref = config['tc']['sam'].rsplit('_labeled.sam', maxsplit=1)[0]
    output:
        sam = temporary(config['talon']['sam'])
