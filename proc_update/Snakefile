import pandas as pd
import os
import sys
import swan_vis as swan
import itertools
import cerberus

from utils import *
from sm_utils import *

include: 'download.smk'
include: 'samtools.smk'
include: 'refs.smk'
include: 'talon.smk'
include: 'lapa.smk'
include: 'mapping.smk'
include: 'tc.smk'

# settings we can change each time it's run
configfile: 'config.yml'
config_tsv = '231018_config.tsv'
meta_tsv = 'mouse_metadata.tsv'
auto_dedupe = True

df = parse_config_file(config_tsv,
                       meta_tsv,
                       auto_dedupe=auto_dedupe)

wildcard_constraints:
    genotype='|'.join([re.escape(x) for x in df.genotype.unique().tolist()]),
    sex='|'.join([re.escape(x) for x in df.sex.unique().tolist()]),
    age='|'.join([re.escape(x) for x in df.age.unique().tolist()]),
    tissue='|'.join([re.escape(x) for x in df.tissue.unique().tolist()]),
    biorep_num='|'.join([re.escape(x) for x in df.biorep_num.unique().tolist()]),
    flowcell='|'.join([re.escape(x) for x in df.flowcell.unique().tolist()]),


rule all:
    input:
        expand(config['talon']['db'],
               study='ad003',
               genotype='5xFADHEMI',
               sex='F',
               age='4_months',
               tissue='HC',
               biorep_num='1',
               flowcell='1')

################################################################################
#################################### Mapping ###################################
################################################################################
use rule map as map_reads with:
    input:
        fastq = lambda wc: get_df_col(wc, df, 'fname'),
        ref_fa = config['ref']['fa'],
        sjs = config['ref']['sjs']
    output:
        sam = temporary(config['map']['sam']),
        log = config['map']['log']

use rule alignment_stats as map_stats with:
    input:
        alignment = config['map']['sam']
    output:
        stats = config['map']['stats']

use rule rev_alignment as map_rev with:
    input:
        sam = config['map']['sam']
    output:
        sam_rev = temporary(config['map']['sam_rev'])

################################################################################
###################### TranscriptClean ##########################################
################################################################################
use rule tc as tc_sam with:
    input:
        sam = config['map']['sam_rev'],
        fa = config['ref']['fa']
    params:
        tc = config['tc'],
        opref = config['tc']['sam'].rsplit('_clean.sam', maxsplit=1)[0]
    output:
        sam = temporary(config['tc']['sam']),
        fa = temporary(config['tc']['fa']),
        sam_clean_log = temporary(config['tc']['log']),
        sam_clean_te_log = temporary(config['tc']['te_log'])

use rule alignment_stats as tc_stats with:
    input:
        alignment = config['tc']['sam']
    output:
        stats = config['tc']['stats']

################################################################################
############################## TALON label #####################################
################################################################################
use rule talon_label as talon_label_reads with:
    input:
        fa = config['ref']['fa'],
        sam = config['tc']['sam']
    params:
        frac_a_range = config['talon_label']['frac_a_range'],
        opref = config['talon_label']['sam'].rsplit('_labeled.sam', maxsplit=1)[0]
    output:
        sam = temporary(config['talon_label']['sam'])

use rule sam_to_bam as bam_from_sam with:
    input:
        sam = config['talon_label']['sam']
    output:
        bam = temporary(config['talon_label']['bam'])

use rule sort_bam as bam_sort with:
    input:
        bam = config['talon_label']['bam']
    output:
        bam = temporary(config['talon_label']['sort_bam'])

use rule index_bam as bam_ind with:
    input:
        bam = config['talon_label']['sort_bam']
    output:
        ind = temporary(config['talon_label']['ind_bam'])

################################################################################
################# Merge data from separate flowcells  ##########################
################################################################################
use rule merge_alignment as talon_label_merge with:
    input:
        files = lambda wc:get_cfg_entries(wc, df, config['talon_label']['sort_bam'])
    output:
        bam = temporary(config['merge']['bam'])

use rule sort_bam as bam_sort_merge with:
    input:
        bam = config['merge']['bam']
    output:
        bam = config['merge']['sort_bam']

use rule index_bam as bam_ind_merge with:
    input:
        bam = config['merge']['sort_bam']
    output:
        ind = config['merge']['ind_bam']

################################################################################
################################## TALON #######################################
################################################################################
rule talon_config:
    input:
        bams = lambda wc:get_cfg_entries(wc, df, config['merge']['sort_bam']),
        bam_inds = lambda wc:get_cfg_entries(wc, df, config['merge']['ind_bam']),
    resources:
        threads = 1,
        mem_gb = 4
    output:
        cfg = config['talon']['config']
    run:
        temp = get_cfg_entries(wildcards, df, config['merge']['bam'], return_df=True)
        temp = temp[['sample', 'dataset', 'platform', 'file']]
        temp.to_csv(output.cfg, index=False, header=None, sep=',')

use rule talon_init as talon_init_db with:
    input:
        gtf = config['ref']['gtf']
    output:
        db = config['ref']['talon']['db']
    params:
        opref = config['ref']['talon']['db'].rsplit('.db', maxsplit=1)[0],
        genome_ver = config['ref']['fa_ver'],
        annot_ver = config['ref']['gtf_ver'],
        min_transcript_len = config['talon']['min_transcript_len'],
        max_5_dist = config['talon']['max_5_dist'],
        max_3_dist = config['talon']['max_3_dist']

use rule talon as talon_run with:
    input:
        db = config['ref']['talon']['db'],
        cfg = config['talon']['config']
    params:
        genome_ver = config['ref']['fa_ver'],
        opref = config['talon']['db'].rsplit('_talon.db', maxsplit=1)[0]
    output:
        db = config['talon']['db'],
        read_annot = config['talon']['annot']
